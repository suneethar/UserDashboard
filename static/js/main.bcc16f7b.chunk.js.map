{"version":3,"sources":["redux/actions/actionTypes.tsx","redux/actions/actionCreator.tsx","components/Checkbox/index.tsx","components/Checkbox/Checkbox.tsx","components/Table/ActionToolbar.tsx","components/Table/TableBody.tsx","components/Table/TableHead.tsx","components/Table/Table.tsx","redux/middleware/middleware.tsx","components/Pagination/index.tsx","components/Pagination/Pagination.tsx","components/Search/index.tsx","components/Search/Search.tsx","components/UserDetails/index.tsx","components/UserDetails/UserDetails.tsx","redux/reducers/reducer.tsx","redux/store/store.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ACTION_TYPES","setPageNumber","payload","type","selectAll","Checkbox","updateCheckbox","checked","onChange","e","ActionToolbar","editData","deleteData","className","href","onClick","TableBody","data","columns","selectedItems","useState","editRowId","setEditRowId","dispatch","useDispatch","deleteRow","row","id","toggleCheckbox","target","unselectItem","updateRow","column","index","value","map","rowIndex","rowSelected","includes","isRowSelected","editRow","TableHead","isAllRowSelected","role","scope","selectedRows","toggleSelectAll","Table","Object","keys","filter","key","isAllRowsSelected","length","fetchData","url","fetch","then","response","json","catch","error","console","log","Pagination","totalPages","selectedPage","pageList","Array","from","_","i","pageNo","updatePageNumber","Search","filteredText","updateFilteredText","placeholder","UserDetails","state","useSelector","pageNumber","tableData","filteredData","selectedData","deleteSelectedRows","useEffect","startIndex","endIndex","slice","getTableData","Math","floor","initialState","loading","dataReducer","action","item","some","toLowerCase","slectedData","newData","forEach","push","store","createStore","applyMiddleware","thunk","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcc16f7b.chunk.js","sourcesContent":["export const ACTION_TYPES = {\r\n    'getData': 'GETDATA',\r\n    'setData': 'SETDATA',\r\n    'setPageNumber': 'SETPAGENUMBER',\r\n    'setFilteredText': 'SETFILTEREDTEXT',\r\n    'updateSelectedItem': 'UPDATESELECTEDITEM',\r\n    'deleteItem': 'DELETEITEM',\r\n    'deleteSelectedItems': 'DELETESELETEDITEMS',\r\n    'selectAll': 'SELECTALL',\r\n    'selectItem': 'SELECTITEM',\r\n    'unselectItem': 'UNSELECTITEM',\r\n    'updateItem': 'UPDATEITEM'\r\n}\r\n\r\n","import {ACTION_TYPES} from './actionTypes';\r\n\r\nexport const getData = (payload) => {\r\n    return {\r\n        type: ACTION_TYPES.getData,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const setData = (payload) => {\r\n    return {\r\n        type: ACTION_TYPES.setData,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const setPageNumber = (payload) => {\r\n    return {\r\n        type: ACTION_TYPES.setPageNumber,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const setFilteredText = (payload) => {\r\n    return {\r\n        type: ACTION_TYPES.setFilteredText,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const updateSelectedItem = (payload) => {\r\n    return {\r\n        type: ACTION_TYPES.updateSelectedItem,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const deleteItem = (payload) => {\r\n    return {\r\n        type: ACTION_TYPES.deleteItem,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const selectAll = (payload) => {\r\n    return {\r\n        type: ACTION_TYPES.selectAll,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const selectItem = (payload) => {\r\n    return {\r\n        type: ACTION_TYPES.selectItem,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const unselectItem = (payload) => {\r\n    return {\r\n        type: ACTION_TYPES.unselectItem,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const updateItem = (payload) => {\r\n    return {\r\n        type: ACTION_TYPES.updateItem,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const deleteSelectedItems = () => {\r\n    return {\r\n        type: ACTION_TYPES.deleteSelectedItems,\r\n        payload: []\r\n    }\r\n}\r\n\r\n","import Checkbox from \"./Checkbox\";\r\nexport default Checkbox;","import React from \"react\";\r\n\r\nconst Checkbox = ({updateCheckbox, checked}) => {\r\n    return (\r\n        <input type=\"checkbox\" onChange={(e) => updateCheckbox(e)} checked={checked} />\r\n    )\r\n}\r\n\r\nexport default Checkbox;","import React from \"react\";\r\n\r\nconst ActionToolbar = ({editData, deleteData}) => {\r\n    return (\r\n        <div className=\"table__actions\">\r\n            <a href=\"#\" onClick={() => editData()}><i className=\"far fa-edit\"></i></a>\r\n            <a href=\"#\" onClick={() => deleteData()}><i className=\"far fa-trash-alt\"></i></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActionToolbar;","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteItem, selectItem, unselectItem, updateItem } from '../../redux/actions/actionCreator';\r\nimport Checkbox from '../Checkbox';\r\nimport ActionToolbar from './ActionToolbar';\r\n\r\nconst TableBody = ({data, columns, selectedItems}) => {\r\n    const [editRowId, setEditRowId] = useState(null);\r\n\r\n    // Redux dispatch to update state\r\n    const dispatch = useDispatch();\r\n\r\n    const deleteRow = (row) => {\r\n        dispatch(deleteItem(row.id));\r\n    }\r\n\r\n    const toggleCheckbox = (e, row) => {\r\n        if (e.target.checked) {\r\n            dispatch(selectItem(row.id));\r\n        } else {\r\n            dispatch(unselectItem(row.id));\r\n        }\r\n    }\r\n\r\n    const isRowSelected = (row) => {\r\n        // SelectedIems contains Id of rows which are selected\r\n        return selectedItems.includes(row.id);\r\n    }\r\n\r\n    const updateRow = (e, row, column, index) => {\r\n        row[column] = e.target.value;\r\n        dispatch(updateItem({index: index, column: column, value: e.target.value}))\r\n    }\r\n\r\n    const editRow = (row) => {\r\n        setEditRowId(row.id);\r\n    }\r\n\r\n    return (\r\n        <tbody className=\"table__body\">\r\n            {data.map((row, rowIndex) => {\r\n                const rowSelected = isRowSelected(row);\r\n\r\n                return <tr key={row.id} className={`table__body__row  ${rowSelected ? 'row-selected' : ''}`}>\r\n                    <td className=\"table__checkbox\">\r\n                        <Checkbox updateCheckbox={(e) => toggleCheckbox(e,row)} checked={rowSelected} />\r\n                    </td>\r\n\r\n                    {columns.map((column, index) => {\r\n                        return <td key={`${row.id}_${index}`}>\r\n                            { typeof row[column] !== 'object' ? \r\n                            row.id === editRowId ? \r\n                            <input type=\"text\" value={row[column]} onChange={(e) => updateRow(e, row, column, rowIndex)} /> : row[column] : \r\n                            '' \r\n                            }\r\n                        </td>\r\n                    })}\r\n\r\n                    <td>\r\n                        <ActionToolbar editData={() => editRow(row)} deleteData={() => deleteRow(row)} />\r\n                    </td>\r\n                </tr>\r\n            })}\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default TableBody;","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { selectAll } from '../../redux/actions/actionCreator';\r\nimport Checkbox from '../Checkbox';\r\n\r\nconst TableHead = ({data, columns, isAllRowSelected}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const toggleSelectAll = (e) => {\r\n        /** set data to empty when uncheked \r\n         * and dispatch and action to reducer\r\n        */\r\n        const selectedRows = e.target.checked ? data : [];\r\n        dispatch(selectAll(selectedRows));\r\n    }\r\n\r\n    return (\r\n        <thead className=\"table__header\">\r\n            <tr>\r\n                <th role=\"columnheader\" scope=\"col\" className=\"table__checkbox\">\r\n                    <Checkbox updateCheckbox={(e) => toggleSelectAll(e)} checked={isAllRowSelected} />\r\n                </th>\r\n                {columns.map((column) => {\r\n                    return <th role=\"columnheader\" scope=\"col\" key={column}>\r\n                        {column}\r\n                    </th>\r\n                })}\r\n                <th role=\"columnheader\" scope=\"col\">\r\n                    Actions\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nexport default TableHead;","import React from 'react';\r\nimport TableBody from './TableBody';\r\nimport TableHead from './TableHead';\r\nimport './_table.scss';\r\n\r\nconst Table = ({data, selectedItems}) => {\r\n    const dataKeys = Object.keys(data[0]);\r\n    let columns = dataKeys.filter((key) => key !== 'id');\r\n    const isAllRowsSelected = data.length === selectedItems.length;    \r\n\r\n    return (\r\n        <table className=\"table\">\r\n            <TableHead columns={columns} data={data} isAllRowSelected={isAllRowsSelected}></TableHead>\r\n            <TableBody columns={columns} data={data} selectedItems={selectedItems}></TableBody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Table;","import { setData } from '../actions/actionCreator';\r\n\r\nexport const fetchData = (url) => (dispatch) => {\r\n    fetch(url)\r\n    .then(response => response.json())\r\n    .then((data) => {\r\n        return dispatch(setData(data))\r\n    })\r\n    .catch(error => console.log(error))\r\n}","import Pagination from \"./Pagination\";\r\nexport default Pagination;","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { selectAll, setPageNumber } from '../../redux/actions/actionCreator';\r\nimport './_pagination.scss';\r\n\r\nconst Pagination = ({totalPages, selectedPage}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const pageList = Array.from({length: totalPages}, (_, i) => i + 1);\r\n\r\n    const updatePageNumber = (selectedPage) => {\r\n        dispatch(setPageNumber(selectedPage));\r\n        // Clear all selection when page changes\r\n        dispatch(selectAll([]));\r\n    }\r\n\r\n    const gotoPreviousPage = () => {\r\n        if (totalPages > 0) {\r\n            dispatch(setPageNumber(selectedPage-1));\r\n        }\r\n        \r\n    }\r\n\r\n    const gotoNextPage = () => {\r\n        if (totalPages > 0) {\r\n            dispatch(setPageNumber(selectedPage+1));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"pagination\">\r\n            <div></div>\r\n            <ul className=\"pagination__lists\">\r\n                <li>\r\n                    <button className={`btn ${selectedPage === 1 || totalPages == 0 ? 'btn--disabled': ''}`} onClick={() => gotoPreviousPage()}>\r\n                        Previous\r\n                    </button>\r\n                </li>\r\n                {pageList.map((pageNo) => {\r\n                    return <li key={pageNo}>\r\n                        <button className={`btn ${selectedPage === pageNo ? 'btn--primary': ''}`} \r\n                        onClick={() => updatePageNumber(pageNo)}>\r\n                            {pageNo}\r\n                        </button>\r\n                    </li>\r\n                })}\r\n                <li>\r\n                    <button className={`btn ${selectedPage ===  totalPages || totalPages === 0? 'btn--disabled': ''}`} onClick={() => gotoNextPage()}>\r\n                        Next\r\n                    </button>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Pagination;","import Search from './Search';\r\nexport default Search;","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setFilteredText } from \"../../redux/actions/actionCreator\";\r\nimport './_search.scss';\r\n\r\nconst Search = ({filteredText}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const updateFilteredText = (e) => {\r\n        dispatch(setFilteredText(e.target.value))\r\n    }\r\n\r\n    return (\r\n        <input type=\"text\" className=\"gt__searchbar\" placeholder=\"Search by name, email or role\"\r\n        value={filteredText} onChange={(e) => updateFilteredText(e)} />\r\n    )\r\n}\r\n\r\nexport default Search;","import UserDetails from \"./UserDetails\";\r\nexport default UserDetails;","import React, { useEffect } from 'react';\r\nimport Table from '../Table/Table';\r\nimport { useSelector, useDispatch, RootStateOrAny} from 'react-redux'\r\nimport {fetchData} from '../../redux/middleware/middleware';\r\nimport Pagination from '../Pagination';\r\nimport Search from '../Search';\r\nimport './_userDetails.scss';\r\nimport { deleteSelectedItems } from '../../redux/actions/actionCreator';\r\n\r\nconst ITEMSPERPAGE = 10;\r\n\r\nconst UserDetails = () => {\r\n    const dispatch = useDispatch();\r\n    let state = useSelector((state:RootStateOrAny )=> {\r\n        return state;\r\n    })\r\n\r\n    let pageNumber = state.pageNumber;\r\n    let tableData = state.filteredText ? state.filteredData : state.data;\r\n    let selectedData = state.selectedData;\r\n\r\n    const getTableData = () => {\r\n        const startIndex = (pageNumber -1) * ITEMSPERPAGE;\r\n        const endIndex = (pageNumber * ITEMSPERPAGE);\r\n        // Return tableData based on page selected\r\n        return tableData.slice(startIndex, endIndex);\r\n    }\r\n\r\n    const getTotalPages = () => {\r\n        return Math.floor(tableData.length / ITEMSPERPAGE);\r\n    }\r\n\r\n    const deleteSelectedRows = () => {\r\n        dispatch(deleteSelectedItems())\r\n    }\r\n\r\n    useEffect(() => {\r\n        const url = 'https://geektrust.s3-ap-southeast-1.amazonaws.com/adminui-problem/members.json'\r\n        dispatch(fetchData(url));\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"gt__main\">\r\n            <div className=\"gt__main__toolbar\">\r\n                <button onClick={() => deleteSelectedRows()} \r\n                className={`btn btn--danger ${selectedData.length === 0 ? 'btn--disabled': ''}`}>\r\n                    Delete Selected\r\n                </button>\r\n                <Search filteredText={state.filteredText} />\r\n            </div>\r\n            \r\n            { tableData && tableData.length > 0 ? \r\n                <Table data={getTableData()} selectedItems={selectedData} />\r\n                : \r\n                <div>No Results Found</div>\r\n            }\r\n            <Pagination totalPages={getTotalPages()} selectedPage={pageNumber} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserDetails;","import {ACTION_TYPES} from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    data: [],\r\n    loading: false,\r\n    error: false,\r\n    pageNumber: 1,\r\n    filteredText: '',\r\n    filteredData: [],\r\n    selectedData: []\r\n}\r\n\r\nconst dataReducer = (state = initialState, action) => {\r\n    let payload = action.payload;\r\n\r\n    switch(action.type) {\r\n        case ACTION_TYPES.setData:\r\n            return { ...state, data: payload };\r\n\r\n        case ACTION_TYPES.setPageNumber:\r\n            return { ...state, pageNumber: payload };\r\n\r\n        case ACTION_TYPES.setFilteredText:\r\n            let filteredData = state.data.filter(item => \r\n                Object.keys(item).some(key => \r\n                item[key].toLowerCase().includes(payload.toLowerCase())\r\n            ))\r\n            return { ...state, filteredText: payload, filteredData: filteredData };\r\n\r\n        case ACTION_TYPES.updateSelectedItem:\r\n            return { ...state, slectedData: [...state.selectedData, payload] };\r\n\r\n        case ACTION_TYPES.deleteItem:\r\n            let data = state.data.filter((item) => item.id !== payload)\r\n            return { ...state, data: data };\r\n\r\n        case ACTION_TYPES.deleteSelectedItems: \r\n            let newData = state.data.filter((item) => !state.selectedData.includes(item.id));\r\n            return { ...state, data: newData, selectedData: [] };\r\n\r\n        case ACTION_TYPES.selectAll: \r\n            let selectedData = [];\r\n            payload.forEach((item) => selectedData.push(item.id));\r\n            return { ...state, selectedData: selectedData };\r\n\r\n        case ACTION_TYPES.selectItem:\r\n            return { ...state,  selectedData: [...state.selectedData, payload]};\r\n\r\n        case ACTION_TYPES.unselectItem:\r\n            let selectedItems = state.selectedData.filter((item) => item !== payload);\r\n            return { ...state, selectedData: selectedItems };\r\n\r\n        case ACTION_TYPES.updateItem:\r\n            let tableData = [...state.data];\r\n            tableData[payload.index][payload.column] = payload.value;\r\n            return { ...state, data: tableData  };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default dataReducer;","import {createStore, applyMiddleware} from 'redux';\r\nimport dataReducer from '../reducers/reducer'\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store  = createStore(\r\n    dataReducer,\r\n    applyMiddleware(thunk)\r\n)\r\n\r\nexport default store;","import React from 'react';\nimport './App.css';\nimport UserDetails from './components/UserDetails';\nimport { Provider } from 'react-redux'\nimport store from './redux/store/store';\n\nfunction App() {\n  \n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <UserDetails />\n      </div>\n    </Provider>\n    \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}